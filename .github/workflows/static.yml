import requests
from textblob import TextBlob

# Replace with your GitHub personal access token for higher rate limits (optional)
GITHUB_TOKEN = "your_github_token_here"
HEADERS = {"Authorization": f"token {GITHUB_TOKEN}"} if GITHUB_TOKEN else {}

def get_issues_comments(repo_owner, repo_name):
    """Fetch issue comments from the specified GitHub repository."""
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/comments"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        return [comment['body'] for comment in response.json()]
    else:
        print(f"Failed to fetch issue comments: {response.status_code}")
        return []

def get_commit_messages(repo_owner, repo_name):
    """Fetch commit messages from the specified GitHub repository."""
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/commits"
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        return [commit['commit']['message'] for commit in response.json()]
    else:
        print(f"Failed to fetch commit messages: {response.status_code}")
        return []

def analyze_sentiment(texts):
    """Analyze sentiment of a list of texts and return the average polarity."""
    sentiments = [TextBlob(text).sentiment.polarity for text in texts if text]
    return sum(sentiments) / len(sentiments) if sentiments else 0

def main():
    repo_owner = input("Enter the repository owner: ")
    repo_name = input("Enter the repository name: ")

    issue_comments = get_issues_comments(repo_owner, repo_name)
    commit_messages = get_commit_messages(repo_owner, repo_name)

    issue_sentiment = analyze_sentiment(issue_comments)
    commit_sentiment = analyze_sentiment(commit_messages)

    print(f"Average Issue Comments Sentiment: {issue_sentiment:.2f}")
    print(f"Average Commit Messages Sentiment: {commit_sentiment:.2f}")

    overall_sentiment = (issue_sentiment + commit_sentiment) / 2
    print(f"Overall Repository Sentiment: {overall_sentiment:.2f}")

if __name__ == "__main__":
    main()
